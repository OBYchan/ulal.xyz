import { Fragment } from 'react'
import dynamic from 'next/dynamic'
import byteSize from 'byte-size'

import Meta from '@/components/Meta/Custom'
import LayoutArticle from '@/components/Layout/Default'
import { SITE_METADATA } from '@/lib/constants'
import { getPsiReportData } from '@/lib/api'
import { formatThousand } from '@/lib/utils'
import { getPerfColorClass, getLCPColorClass, getFIDColorClass, getCLSColorClass } from '@/lib/utils/colors'

// eslint-disable-next-line no-unused-vars
const ChartTimeline = dynamic(() => import('@/components/ChartTimeline'), { ssr: false })

export default function Speed ({ data }) {
  const newestData = data[0]

  return (
    <>
      <LayoutArticle>
        <Fragment>
          <Meta
            title="Speed | mazipan.space"
            description="Speed | mazipan.space"
            url={`${SITE_METADATA.url}/speed`}
          />
          <h2 className="mb-8 text-6xl md:text-7xl font-bold tracking-tighter leading-tight">
            Speed ‚ö°Ô∏è
          </h2>
          <div className="content">
            <div className="mb-4">
              Data generated by{' '}
              <a
                href="https://github.com/mazipan/psi-gh-action"
                target="_blank"
                rel="noreferrer"
                alt="psi-gh-action"
                className="border-dashed border-red-500 border-b-2 text-red-500"
              >
                psi-gh-action
              </a>
            </div>

            <div
              className={'px-6 py-4 mb-2 rounded-lg overflow-hidden shadow-lg'}
              key={newestData.timestamp}
            >
              <h3 className="mb-4 text-2xl md:text-3xl font-bold tracking-tighter leading-tight">
                üóì {newestData.timestamp.substring(0, 10)}
              </h3>

              <div className={'expander'}>
                {newestData.reports &&
                  newestData.reports.map((report) => (
                    <div key={`${report.url}${report.device}`}>
                      <h4 className="mb-4 text-lg md:text-xl font-bold capitalize">
                        {report.device === 'desktop' ? 'üíª' : 'üì±'} {report.device}
                      </h4>
                      <div className="mb-4 grid grid-cols-2 md:grid-cols-4">
                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>PERF</small>
                          <div
                            className={`text-4xl md:text-6xl font-bold ${getPerfColorClass(
                              report.perf
                            )}`}
                          >
                            {report.perf * 100}
                          </div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>FID</small>
                          <div
                            className={`text-4xl md:text-6xl font-bold ${getFIDColorClass(
                              report.fid
                            )}`}
                          >
                            {formatThousand(report.fid)}
                          </div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>LCP</small>
                          <div
                            className={`text-4xl md:text-6xl font-bold ${getLCPColorClass(
                              report.lcp
                            )}`}
                          >
                            {formatThousand(report.lcp)}
                          </div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>CLS</small>
                          <div
                            className={`text-4xl md:text-6xl font-bold ${getCLSColorClass(
                              report.cls
                            )}`}
                          >
                            {formatThousand(report.cls)}
                          </div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>FCP</small>
                          <div className={'text-4xl md:text-6xl font-bold'}>{formatThousand(report.fcp)}</div>
                        </div>
                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>TTI</small>
                          <div className={'text-4xl md:text-6xl font-bold'}>{formatThousand(report.tti)}</div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>Total Request</small>
                          <div className={'text-4xl md:text-6xl font-bold'}>{report.req}</div>
                        </div>

                        <div className="mb-2 mr-2 px-6 py-4 rounded text-center">
                          <small>Total Size</small>
                          <div>
                            <span className={'text-4xl md:text-6xl font-bold'}>
                              {byteSize(report.size).value}
                            </span>
                            <small className={'text-lg md:text-xl font-bold'}>
                              {byteSize(report.size).unit}
                            </small>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        </Fragment>
      </LayoutArticle>
    </>
  )
}

export async function getStaticProps () {
  const data = getPsiReportData()

  return {
    props: {
      data
    }
  }
}
